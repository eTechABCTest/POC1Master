<!-- 
/*
Copyright (c) 2013 Up2Go International LLC
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. The name of the author may not be used to endorse or promote products 
   derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, 
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
-->
<!-- 
    Description     :   TableGrid component for reuse in Visualforce pages. 
                        For a given SObject, fields and filter criteria this component renders a page block table 
                        with Standard Salesforce.com look-and-feel with advanced functionality.
    
    Created By      :   Mahendra Swarnakar   
    
    Created Date    :   4/30/2016 
    
    Revision Logs   :   V1.0 - Created
                        V1.1 - Modified By - Mahendra Swarnkar - 04/30/2016 - CR-20160323-9712
                        V1.2 - Modified By - Mahendra Swarnakar - CR-20160308-9682
-->
 <apex:component controller="TableGridController" allowDml="true">
     
    <apex:attribute name="fields" assignTo="{!fieldsParam}" type="String" required="true" description="" />
    <apex:attribute name="type" assignTo="{!typeParam}" type="String" required="true" description="" />
    <apex:attribute name="defaultSObjectInstance" assignTo="{!defaultSObjectInstance}" type="sObject" required="false" description="" />
    <apex:attribute name="filter" assignTo="{!filterParam}" type="String" required="false" description="" />
    <apex:attribute name="sortBy" assignTo="{!sortByParam}" type="String" default="Name" required="false" description="" />
    <apex:attribute name="sortDescending" assignTo="{!sortDescParam}" type="Boolean" required="false" description="" />
    <apex:attribute name="pageSize" assignTo="{!pageSizeParam}" type="Integer" required="false" description="" />  
    <apex:attribute name="mode" assignTo="{!modeParam}" type="String" required="false" default="edit" description="" />
    <apex:attribute name="selected" assignTo="{!selectedIds}" type="Id[]" required="false" description="" />
    <apex:attribute name="blockOnSelect" type="String" required="false" default="buttons" description="Which part of the page (dom id should be blocked) during the selection is send to server." />
    <apex:attribute name="title" type="String" required="false" description="Custom title" />
    <apex:attribute name="image" type="String" required="false" description="Custom icon" />
    <apex:attribute name="layout" type="String" required="false" description="Customize pageblock layout attribute" /> 
    <apex:attribute name="customizeFields" type="Boolean" required="false" default="false" description="Show Panel to customize which fields will be displayed as columns." />
    <apex:attribute name="customizeFilter" type="Boolean" required="false" default="false" description="Show Panel to let users add additional AND statements to the WHERE clause." />
     <apex:attribute name="gridPageId" assignTo="{!gridIdParam}" type="String" required="true" description="Unique name for this TableGrid instance to save settings per user and instance." />
    <apex:attribute name="saveSettings" assignTo="{!saveSettingsParam}" type="Boolean" required="false" default="false" description="Persist settings of a instance for the current user?" />  
    <apex:attribute name="loadLabel" type="String" required="false" default="Loading..." description="Custom load label while asynchronously loading table." />
    <apex:attribute name="searchFilter" assignTo="{!lookupFieldValue}" type="String" required="false" description="Pass in Record.Name to implement advanced lookup functionality (used internally)." /> 
    <apex:attribute name="showMessages" type="Boolean" default="true" required="false" description="" />
    <apex:attribute name="hiddenFields"  type="String" required="false" description="" />
    <apex:attribute name="relationshipFieldAPIName" assignTo="{!relationshipFieldAPIName}"  type="String" required="true" description=""/>
    
    <apex:attribute name="parentRecordName" assignTo="{!parentRecordName}"  type="String" required="true" description=""/>
    <apex:attribute name="childObjectSchemaId" assignTo="{!childObjectSchemaId}"  type="String" required="true" description=""/>
    <apex:attribute name="relationshipFieldSchemaId" assignTo="{!relationshipFieldSchemaId}"  type="String" required="true" description=""/>
    <apex:attribute name="requiredFields" type="String" assignTo="{!reqFieldsStr}" required="false" description="Holds the coma separated API name of required fields"/>
     
    <apex:stylesheet value="{!$Resource.tableGrid_css}" />
    
    <style>
    	.requiredField {position:relative;}
		.requiredField .timeLineIcon-red {background: #D0212F;display: inline-block;width: 2px;position: 
        									absolute;top: 0;bottom: 0;left: -4px;}
        .thinput {min-width:200px;}
        .tdinput {max-width:150px;}
        .dontWrap select{max-width:150px;}
	</style> 
    
	{!Init} 
     
    <apex:outputPanel layout="block" id="grid">
    
        <!-- MESSAGE BOX -->
        <apex:pageMessages id="pagemsgs" rendered="{!showMessages}" escape="false"/>
            
        <apex:pageBlock mode="{!layout}" title="{!IF(ISNULL(title), objectLabelPlural, title)}" rendered="{!isInitialized}"> 
            
            <!-- SETTINGS PANEL -->
            <apex:pageBlockSection id="settings" collapsible="true" title="{!$Label.U2G_2Table_SettingsSectionLabel}" rendered="{!OR(customizeFields, customizeFilter)}" columns="1">
                <script type="text/javascript"> 
                    twistSection(document.getElementById("{!$Component.settings}").childNodes[0].childNodes[0]);
                </script>
                <apex:panelGrid columns="{!IF(AND(customizeFields, customizeFilter), 2, 1)}" width="100%">
                    <c:selectClauseBuilder soqlQuery="{!soqlQuery}" rendered="{!customizeFields}" parentToBlock="{!$Component.settings}" />
                    <c:whereClauseBuilder soqlQuery="{!soqlQuery}" rendered="{!customizeFilter}" />
                </apex:panelGrid>

                <apex:outputPanel layout="block" style="text-align:center; width:100%">
                    <br/>
                    <apex:commandLink styleClass="btn" style="text-decoration:none" id="submitButton" value="{!$Label.U2G_2Table_SettingsSubmitButtonLabel}" action="{!doRefresh}" immediate="true" rerender="grid" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}'); resizeIFrames();" />
                    &nbsp;&nbsp;&nbsp;&nbsp;
                    <apex:commandLink styleClass="btn" style="text-decoration:none" id="resetSettingsButton" value="{!$Label.U2G_2Table_SettingsDefaultsButtonLabel}" action="{!doLoadDefaults}" immediate="true" rerender="grid" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}'); resizeIFrames();"/>
                    <br/>
                    <br/>
                </apex:outputPanel>  
            </apex:pageBlockSection>  
            
            <!-- BUTTON BAR -->
            <apex:pageBlockButtons location="top">
                
                <apex:outputPanel id="buttons"> 
                    <!-- NEW when Related list is in List mode  -->
                    <!-- Modified By - Mahendra Swarnkar - 04/30/2016 - CR-9712 -starts from here -->
                    
                    <apex:outputPanel layout="none" rendered="{!currentMode=='list'}">
                        <apex:commandButton value="New {!objectLabel}" action="{!doEditNew}" rerender="{!$Component.table},{!$Component.buttons}" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}');" disabled="{!$ObjectType[soqlQuery.objectName].createable == false}" >
                            <apex:param value="{!$CurrentPage.URL}" assignTo="{!parentFrameUrl}" />
                        </apex:commandButton>
                    </apex:outputPanel>
                    <!-- NEW when Related list is in Edit mode  -->
                    
                    <apex:outputPanel layout="none" rendered="{!currentMode=='edit'}">
                        <apex:commandButton value="New {!objectLabel}" action="{!doEditNewInlineEntryRecord}" rerender="{!$Component.grid}" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}');" disabled="{!$ObjectType[soqlQuery.objectName].createable == false}">
                            <apex:param value="{!$CurrentPage.URL}" assignTo="{!parentFrameUrl}" />
                        </apex:commandButton>
                    </apex:outputPanel>
                    
                    <!-- SAVE ALL -->
                    <apex:outputPanel layout="none" rendered="{!currentMode=='edit' && ($ObjectType[soqlQuery.objectName].updateable || $ObjectType[soqlQuery.objectName].createable)}">
                            <apex:commandLink styleClass="btn" style="text-decoration: none" action="{! doSaveAll}" value="Save All" rerender="{!$Component.grid}" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}');"/>
                    </apex:outputPanel>
                    
                    <!-- SAVE -->
                   <!-- <apex:outputPanel layout="none" rendered="{! currentMode=='edit'}">
                        <apex:commandButton value="Save selected" action="{!doSaveSelected}" disabled="{!noneSelected}" rerender="{!$Component.grid}" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}');"/>
                    </apex:outputPanel>
                  -->  
                    <!--  DELETE, REFRESH, SWITCH MODE, SAVE ALL, CANCEL -->
                    <apex:outputPanel layout="none" rendered="{!OR(currentMode=='list', currentMode=='edit')}">
                        
                        <apex:outputPanel rendered="{! $ObjectType[soqlQuery.objectName].deletable}">
                            <apex:commandButton value="Delete selected" action="{!doDeleteSelected}" disabled="{!noneSelected }" rerender="{!$Component.grid}" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}');"/>
                        </apex:outputPanel>
                        <apex:commandButton value="{!IF(currentMode=='list','Refresh', 'Cancel')}" action="{!doRefresh}" immediate="true" rerender="{!$Component.grid}" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}');"/>
                        
                        <apex:outputPanel layout="none" rendered="{!currentMode=='list' && ($ObjectType[soqlQuery.objectName].updateable || $ObjectType[soqlQuery.objectName].createable)}">
                            <apex:commandLink styleClass="btn" style="text-decoration: none" action="{!doChangeMode}" value="Edit Mode" rerender="{!$Component.grid}" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}');" />
                        </apex:outputPanel>
                    </apex:outputPanel>
                    <!-- Modified By - Mahendra Swarnkar - 04/30/2016 - CR-9712 -Ends here -->
                </apex:outputPanel>
                
            </apex:pageBlockButtons>
            
            <!-- TABLE -->
            <apex:pageBlockTable value="{!rowManager.rows}" var="row" id="table" width="100%" columnClasses="dontWrap">
                
                <!-- CHECKBOXES -->
                <apex:column style="width:1px;" rendered="{! $ObjectType[soqlQuery.objectName].updateable || $ObjectType[soqlQuery.objectName].createable || $ObjectType[soqlQuery.objectName].deletable}">
                     <apex:facet name="header">
                        <apex:inputCheckbox id="allSelected" value="{!allSelected}" >
                            <apex:actionSupport event="onclick" action="{!doHandleSelection}" rerender="buttons" onSubmit="toggleAll(this); blockNode('{!$Component.grid}');" onBeforeDOMUpdate="unblockNode('{!$Component.grid}');" />
                        </apex:inputCheckbox>
                    </apex:facet>
                     
                    <apex:inputCheckbox value="{!row.isSelected}" styleClass="rowSelector" >
                        <apex:actionSupport event="onclick" action="{!doHandleSelection}" rerender="buttons" onSubmit="blockNode('{!blockOnSelect}');" onBeforeDOMUpdate="unblockNode('{!blockOnSelect}');" />
                    </apex:inputCheckbox>
                </apex:column>
                
                <apex:column headerValue="Action" styleClass="actionColumn" rendered="{! $ObjectType[soqlQuery.objectName].updateable || $ObjectType[soqlQuery.objectName].createable || $ObjectType[soqlQuery.objectName].deletable}">
                    
                    <!-- Modified By - Mahendra Swarnkar - 05/24/2016 - CR-9712 -Added input hidden field to save only those records which got changed- starts from here -->
                    <div class="isChangeFlag" style="display : none;">
                            <apex:inputHidden value="{!row.isChanged}" />         
                    </div>
                    <!-- Modified By - Mahendra Swarnkar - 05/24/2016 - CR-9712 -Added input hidden field to save only those records which got changed- Ends here -->
                    
                    <apex:outputPanel layout="none" rendered="{!NOT(currentMode=='singleselect') && $ObjectType[soqlQuery.objectName].Updateable}">
                        <apex:outputpanel rendered="{!NOT(ISNULL(row.delegate.Id))}">
                            <apex:outputLink styleClass="actionLink" value="{!URLFOR($Action[soqlQuery.objectName].Edit, row.delegate.Id)}" target="_parent">Edit</apex:outputLink>&nbsp;|&nbsp;<apex:outputLink styleClass="actionLink" value="{!URLFOR($Action[soqlQuery.objectName].Delete, row.delegate.Id, [retURL=currentPageUrl])}" target="_parent">Del</apex:outputLink>
                        </apex:outputpanel>
                    </apex:outputPanel>
                    <apex:outputPanel layout="none" rendered="{!currentMode=='singleselect'}">
                        <apex:outputLink rendered="{!currentMode=='select'}" styleClass="actionLink" value="">Select</apex:outputLink>
                    </apex:outputPanel>
                </apex:column>
                
               
                	<apex:repeat value="{!rowManager.soqlQuery.fieldsList}" var="fieldName">
                    <!-- <apex:column styleClass="rowCell_{!fieldName} dontWrap" rendered="{!LOWER(fieldName) == 'recordtypeid'}"> -->
                    <apex:column styleClass="rowCell_{!fieldName} dontWrap" rendered="{!CONTAINS(hiddenFields, LOWER(fieldName))}">
                         
                        <apex:outputPanel layout="block" style="display : none;">
                            <apex:inputField value="{!row.delegate[fieldName]}"/>
                        </apex:outputPanel>
                        
                    </apex:column>
                    
                    <!-- Modified By - Mahendra Swarnkar - 04/30/2016 - CR-9712 - Added rendered condition only -starts from here -->
                    <!-- <apex:column styleClass="rowCell_{!fieldName} dontWrap" rendered="{! if(LOWER(fieldName) == 'recordtypeid' && isDisplayRecordType == false, false, true)  }"> -->
                    <apex:column styleClass="rowCell_{!fieldName} dontWrap" rendered="{!NOT(CONTAINS(hiddenFields, LOWER(fieldName)))}" headerClass="thinput">
                    <!-- Modified By - Mahendra Swarnkar - 04/30/2016 - CR-9712 - Added rendered condition only -Ends here -->
                        
                        <apex:facet name="header" > 
                            <apex:commandLink action="{!doSort}"  value="{!$ObjectType[soqlQuery.objectName].fields[fieldName].Label} {!IF(soqlQuery.sortFieldName==fieldName,IF(soqlQuery.sortDescending,'▼','▲'),'')}" rerender="{! $Component.grid}" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}');">
                                <apex:param name="sortFieldName" value="{!fieldName}" assignTo="{!soqlQuery.sortFieldName}" />
                            </apex:commandLink>
                        </apex:facet>  
                        
                        <!-- EDIT -->                    
                        <apex:outputPanel rendered="{!currentMode=='edit'}" layout="block">
                            <apex:commandLink id="pasteButtonLink"
                                              styleClass="hideMe pasteButton_{!fieldName}" 
                                              style="display:block;float:left;margin-right:8px;" 
                                              rendered="{!$ObjectType[soqlQuery.objectName].fields[fieldName].Updateable}" 
                                              onClick="pasteVertically('{!$Component.pasteButtonLink}', '{!fieldName}', '{!$ObjectType[soqlQuery.objectName].fields[fieldName].Type}'); return false;">
                                <apex:image styleClass="pasteImg" title="Paste field value to all selected rows (marked red)" url="{!URLFOR($Resource.pasteIcon_png)}" />
                            </apex:commandLink>
                            
                            <!-- Render input field if current field is updateable by current user -->
                            <!-- Modified By - Mahendra Swarnkar - 04/30/2016 - CR-9712 - Added rendered condition only -starts from here -->
                            <apex:outputPanel layout="block" styleClass="{!IF(contains(requiredFields, fieldName), 'requiredField', '')}" style="float:left;" rendered="{!if(row.delegate.Id != null, $ObjectType[soqlQuery.objectName].fields[fieldName].Updateable, true)}">
                                <apex:outputPanel styleClass="{! IF(contains(requiredFields, fieldName), 'timeLineIcon-red', '')}" rendered="{!if(row.delegate.Id != null, $ObjectType[soqlQuery.objectName].fields[fieldName].Updateable, true)}"></apex:outputPanel>
                                <apex:inputField styleClass="inputField_{!fieldName} tdinput" value="{!row.delegate[fieldName]}"
                                                 rendered="{!if(row.delegate.Id != null, $ObjectType[soqlQuery.objectName].fields[fieldName].Updateable, true)}"
                                                 onChange="indexIdetifier(this, '{!row.delegate['id']}');" required="false"/>         
                            </apex:outputPanel>
                            
                            <!-- Modified By - Mahendra Swarnkar - 04/30/2016 - CR-9712 - Added rendered condition only -Ends here -->
                            <!-- Else render link to view page -->
                            <apex:outputPanel styleClass="dontWrap" rendered="{!NOT($ObjectType[soqlQuery.objectName].fields[fieldName].Updateable) && row.delegate.Id != null }" layout="block" style="float:left;">
                                <apex:outputLink value="/{!row.delegate.Id}" target="_parent">
                                    <apex:outputField value="{!row.delegate[fieldName]}"/>
                                </apex:outputLink>
                            </apex:outputPanel>
                        </apex:outputPanel>
                        
                        <!-- READONLY -->
                        <apex:outputPanel rendered="{!NOT(currentMode=='edit')}">
                            
                            <apex:variable var="isNameOrIdField" value="{!LOWER(fieldName) == 'name' || LOWER(fieldName) == 'id'}" />
                            
                            <apex:outputField value="{!row.delegate[fieldName]}" rendered="{!NOT(isNameOrIdField)}" />
                            <apex:outputLink value="/{!row.delegate.Id}" target="_parent" rendered="{!isNameOrIdField}"><apex:outputField value="{!row.delegate[fieldName]}" /></apex:outputLink>
                        </apex:outputPanel>
                    </apex:column>
                    
                </apex:repeat> 
                
                <!-- PAGINATION FOOTER -->
                <apex:facet name="footer">
                    
                    <!-- Modified By - Mahendra Swarnkar - 04/30/2016 - CR-9712 - Added rendered condition only -starts from here -->
                    <apex:outputPanel id="pagination" styleClass="wholeWidth" rendered="{!NOT(currentMode=='edit')}">
                     <!-- Modified By - Mahendra Swarnkar - 04/30/2016 - CR-9712 - Added rendered condition only -Ends here -->
                     
                        <apex:outputPanel styleClass="evenlySpaced">  
                            <!-- Page 2 of 21 -  3001 total results  --> 
                            <apex:outputText value="{!$Label.U2G_2Table_PaginationStatusline}">
                                <apex:param value="{!rowManager.pageNumber}"/>
                                <apex:param value="{!rowManager.pageCount}"/>
                                <apex:param value="{!rowManager.recordCount}"/>
                            </apex:outputText>
                            &nbsp;
                            <apex:outputText value="(Filtered)" rendered="{!rowManager.soqlQuery.filterStatements.size > 0}" style="color:#900;" />
                        </apex:outputPanel> 
                        
                        <apex:outputPanel styleClass="evenlySpaced"> 
                            <apex:outputText value="{!$Label.U2G_2Table_PaginationFirstLinkLabel}" 
                                rendered="{!NOT(rowManager.hasPreviousPage)}"
                            />
                            <apex:commandLink value="{!$Label.U2G_2Table_PaginationFirstLinkLabel}" 
                                rendered="{!rowManager.hasPreviousPage}"
                                action="{!rowManager.loadFirstPage}"
                                immediate="true"
                                rerender="{!$Component.grid}"
                                onClick="blockNode('{!$Component.grid}');" 
                                onComplete="unblockNode('{!$Component.grid}'); resizeIFrames();"
                            />
                            &nbsp;&nbsp; 
                    
                            <apex:outputText value="{!$Label.U2G_2Table_PaginationPreviousLinkLabel}" 
                                rendered="{!NOT(rowManager.hasPreviousPage)}"
                            />
                            <apex:commandLink value="{!$Label.U2G_2Table_PaginationPreviousLinkLabel}" 
                                rendered="{!rowManager.hasPreviousPage}"
                                action="{!rowManager.loadPreviousPage}"
                                immediate="true"
                                rerender="{!$Component.grid}"
                                onClick="blockNode('{!$Component.grid}');" 
                                onComplete="unblockNode('{!$Component.grid}'); resizeIFrames();"
                            />
                            &nbsp;&nbsp;
                    
                            <apex:repeat value="{!rowManager.previousSkipPageNumbers}" var="skipPageNumber">
                                <apex:outputPanel >
                                    <apex:commandLink value="{!skipPageNumber}" action="{!rowManager.skipToPage}" immediate="true" rerender="{!$Component.grid}" onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}'); resizeIFrames();">
                                        <apex:param name="pageNumber" id="pageNumber" value="{!skipPageNumber}" assignto="{!rowManager.pageNumber}" />
                                    </apex:commandLink>
                                </apex:outputPanel>
                                &nbsp;&nbsp;
                            </apex:repeat> 
                            
                            <apex:outputText style="text-decoration:none; font-weight:bold; background-color: #E3F3FF" value="{!rowManager.pageNumber}"/>
                            &nbsp;&nbsp;
                            
                            <apex:repeat value="{!rowManager.nextSkipPageNumbers}" var="skipPageNumber">
                                <apex:outputPanel >
                                    <apex:commandLink value="{!skipPageNumber}" action="{!rowManager.skipToPage}" immediate="true" rerender="{!$Component.grid}"  onClick="blockNode('{!$Component.grid}');" onComplete="unblockNode('{!$Component.grid}'); resizeIFrames();">
                                        <apex:param name="pageNumber" id="pageNumber" value="{!skipPageNumber}" assignto="{!rowManager.pageNumber}" />
                                    </apex:commandLink>
                                </apex:outputPanel>
                                &nbsp;&nbsp;
                            </apex:repeat>
                    
                            <!-- NEXT                                       -->
                            <apex:outputText value="{!$Label.U2G_2Table_PaginationNextLinkLabel}" 
                                rendered="{!NOT(rowManager.hasNextPage)}"
                            />
                            <apex:commandLink value="{!$Label.U2G_2Table_PaginationNextLinkLabel}" 
                                rendered="{!rowManager.hasNextPage}"
                                action="{!rowManager.loadNextPage}" 
                                rerender="{!$Component.grid}"
                                 immediate="true"
                                onClick="blockNode('{!$Component.grid}');" 
                                onComplete="unblockNode('{!$Component.grid}'); resizeIFrames();"
                            />
                            &nbsp;&nbsp;
                    
                            <apex:outputText value="{!$Label.U2G_2Table_PaginationLastLinkLabel}" 
                                rendered="{!NOT(rowManager.hasNextPage)}"
                            />
                            <apex:commandLink value="{!$Label.U2G_2Table_PaginationLastLinkLabel}" 
                                rendered="{!rowManager.hasNextPage}"
                                action="{!rowManager.loadLastPage}"   
                                rerender="{!$Component.grid}"
                                 immediate="true"
                                onClick="blockNode('{!$Component.grid}');" 
                                onComplete="unblockNode('{!$Component.grid}'); resizeIFrames();"
                            /> 
                        </apex:outputPanel>
                        
                        <!-- Modified By - Mahendra Swarnkar - 05/24/2016 - CR-9712 -Updated rendered condition - starts from here -->
                        <!-- <apex:outputPanel styleClass="evenlySpaced" rendered="{!OR(customizeFields, customizeFilter)}"> -->
                        <apex:outputPanel styleClass="evenlySpaced" >
                        <!-- Modified By - Mahendra Swarnkar - 05/24/2016 - CR-9712 -Updated rendered condition - Ends here --> 
                        
                            <apex:outputText value="{!$Label.U2G_2Table_PaginationPageSizeLabel}" />&nbsp;
                            <apex:selectList value="{!rowManager.pageSize}" size="1">
                                <apex:selectOption itemValue="5" itemLabel="5" />   
                                <apex:selectOption itemValue="10" itemLabel="10" />
                                <apex:selectOption itemValue="15" itemLabel="15" />
                                
                               <!-- <apex:selectOption itemValue="20" itemLabel="20" />
                                <apex:selectOption itemValue="25" itemLabel="25" />
                                <apex:selectOption itemValue="50" itemLabel="50" />
                               -->
                                <!-- Reduced that to Max 50 as Doug in 2Forecast with 2x instrances ran into Viewstate size errors -->
                                
                                <apex:actionSupport event="onchange" action="{!doRefresh}" rerender="{!$Component.grid}" onSubmit="blockNode('{!$Component.grid}');" onBeforeDOMUpdate="unblockNode('{!$Component.grid}');" oncomplete="resizeIFrames();"  /> 
                            </apex:selectList>
                            
                        </apex:outputPanel>
                    </apex:outputPanel>
                </apex:facet> 
            </apex:pageBlockTable> 
        </apex:pageBlock> 
        
        <script type="text/javascript">
            $j_tg = jQuery.noConflict();
            
            // Temporary fix http://stackoverflow.com/questions/7825448/webkit-issues-with-event-layerx-and-event-layery
            $j_tg.event.props = $j_tg.event.props.join('|').replace('layerX|layerY|', '').split('|');

            // Bind onclick handler to checkbox to add class
            $j_tg('.rowSelector').click(function(e) {
                $j_tg(this).parents('.dataRow').toggleClass('isSelected'); 
            });
          
            // Bind onchange handler to inputfields to add class
            $j_tg('*[class^="inputField"]').change(function(e) {
                $j_tg(this).not('.error').parents('.dataCell').toggleClass('highlightChangedField');
            });
        
            $j_tg('.rowSelector:checked').parents('.dataRow').addClass('isSelected');
        
            // Fade out page messages after 3 seconds or on click
        	setTimeout(function() { $j_tg('div.message').fadeOut('slow'); }, 30000);
            $j_tg('div.message').click(function(e) {
                $j_tg(this).fadeOut('slow');
            });
            
            // Bind event handlers to each field 
            <apex:repeat value="{!rowManager.soqlQuery.fieldsList}" var="fieldName">
                <apex:outputPanel layout="none" rendered="{!AND(NOT($ObjectType[soqlQuery.objectName].fields[fieldName].Unique), $ObjectType[soqlQuery.objectName].fields[fieldName].Updateable)}">
                    $j_tg('.rowCell_{!fieldName}').hover(function(e) {
                        $j_tg(this).find('.pasteButton_{!fieldName}').toggleClass('hideMe');
                    });
                    
                    $j_tg('.pasteButton_{!fieldName}').hover(function(e) {   
                        $j_tg('.isSelected').find('.rowCell_{!fieldName}').toggleClass('highlightPasteField');
                    });
                </apex:outputPanel>
            </apex:repeat>
        </script>
        
        <!-- Hide page block title if title attribute intentionally left blank -->
        <apex:outputPanel layout="none" rendered="{!title==''}">
            <script type="text/javascript">
               $j_tg = jQuery.noConflict(); 
               $j_tg(document.getElementById("{!$Component.grid}")).find('div.pbHeader').hide();
            </script>
        </apex:outputPanel>
        
        <!-- Add custom icon if attribute set -->
        <apex:outputPanel layout="none" rendered="{!NOT(ISNULL(image))}">
            <script type="text/javascript"> 
               $j_tg = jQuery.noConflict(); 
               // Add Image to Page Block Table
               var image = $j_tg('<img src="{!image}" class="relatedListIcon" style="display:inline" height="24" width="24" />');
               var title = $j_tg(document.getElementById("{!$Component.grid}")).find('.pbTitle');
               $j_tg(image).prependTo(title);
           </script>
        </apex:outputPanel>
    </apex:outputPanel>
            
    <apex:includeScript value="{!$Resource.jquery_min_js}" /> 
    <apex:includeScript value="{!$Resource.jquery_blockUI_js}" /> 
    <apex:includeScript value="{!$Resource.tableGrid_js}" />
    
    <script type="text/javascript">
        $j_tg = jQuery.noConflict();

        $j_tg.getScript('{!$Resource.jquery_blockUI_js}');
        
        blockNode = function(nodeId) {
            var node = $j_tg('[id$="' + nodeId + '"]');
            $j_tg(node).block({ message: null });
        };
        
        unblockNode = function(nodeId) {
            var node = $j_tg('[id$="' + nodeId + '"]');
            $j_tg(node).unblock({ message: null });
        };
    </script>
     
     <!-- Modified By - Mahendra Swarnkar - 05/24/2016 - CR-9712 -starts from here -->
	<script type="text/javascript">
		function indexIdetifier(elem, id) {
        	var parentRow = $j_tg(elem).closest('tr');
            var inputforIschanged = parentRow.find('.isChangeFlag input[Type ="hidden"]');
            inputforIschanged.val(true);
		}
	</script>
</apex:component>