<apex:component >
    
    <apex:attribute name="appName" description="unique name for the angular app" type="string" required="true"/> <!-- also used for the unique element id for the attribute value (ie: value a) -->
    <apex:attribute name="ctrlName" description="unique name for the angular controller" type="string" required="true"/>
    <apex:attribute name="attributeLabel" description="label to be used for the attribute picklist" type="string" required="false"/>
    <apex:attribute name="hiddenInputId" description="Id of the hidden input field" type="string" required="true"/>
    <apex:attribute name="referenceModuleId" description="Id of the element containing Reference Module value" type="string" required="true"/>
    <apex:attribute name="dataId" description="Id of the element containing picklist data" type="string" required="true"/>
    <apex:attribute name="headerLabel" description="picklist data" type="string"/>
    <apex:attribute name="showHeader" description="whether or not to show the pageblocksection header" type="boolean" default="false"/>
    
    <script>
    var {!appName} = angular.module('{!appName}', []);
    
    {!appName}.controller("{!ctrlName}", function($scope, $http, filterFilter, $timeout) {
        /**
         * @description: variables
         **/
        $scope.picklistGroups = [];
        $scope.currentGroup;
        $scope.currentItem;
        
        var curGroupVal, curItemVal;
        var {!hiddenInputId} = j$('[id*=\'{!hiddenInputId}\']').val();
        if (typeof {!hiddenInputId} != "undefined") {
            curGroupVal = {!hiddenInputId}.split(": ")[0];
            curItemVal = {!hiddenInputId}.split(": ")[1];
        }
        
        var {!referenceModuleId};
        
        /**
         * @description: setup the dependent picklist
         **/
        var data = j$('[id*={!dataId}]').val();
        var dataMap = JSON.parse(data);
        var groups = [];
        $scope.init_{!ctrlName} = function init2() {
            
            //reset picklists to blank arrays
            $scope.resetPicklists();
            
            {!referenceModuleId} = j$('[id*=\'{!referenceModuleId}\']').val();
            //get groups in the map
            var refModules;
            if ({!referenceModuleId} != null) 
                refModules = {!referenceModuleId}.split(': ');
            
            for (var x in refModules) {
                if (dataMap.hasOwnProperty(refModules[x])) {
                    groups = dataMap[refModules[x]];
                }
            }
            
            for (var i in groups) {
                $scope.picklistGroups.push({ name:groups[i].displayName, val:groups[i].childWrappers });
                if (curGroupVal != null && curGroupVal == groups[i].displayName) {
                    $scope.currentGroup = $scope.picklistGroups[$scope.picklistGroups.length-1];
                    //console.log('@@curItemVal:' + curItemVal);
                    $scope.currentItem = curItemVal;
                    $timeout(function () { // need this timeout so the subType value populates correctly
                        j$('[id*=\'{!appName}\']').val(curItemVal);
                    }, 0, false);
                }
            }
            
            if ($scope.currentGroup == null) {
                if ($scope.currentGroup != undefined)
                	$scope.currentItem = $scope.currentGroup.val[0];
            }
        }
        
        /**
         * @description: when Reference Type is changed, update the Reference Subtype list
         **/
        $scope.groupChanged = function() {
            if ($scope.currentGroup) { //a non-null value has been chosen
                $scope.currentItem = $scope.currentGroup.val[0];
            }
            $scope.updateValue();
        }
        
        /**
         * @description: save function sets the applicable reference module value by combining the [Group]-[Item]
         **/
        $scope.updateValue = function updateValue() {
            
            var newValue = '';
            if ($scope.currentGroup) {
                //console.log('@@group - item:' + $scope.currentGroup.name + ": " + $scope.currentItem);
                newValue = $scope.currentGroup.name;
                if ($scope.currentItem) {
                    newValue = $scope.currentGroup.name;
                    if (typeof $scope.currentItem != "string") {
                        newValue += ": " + $scope.currentItem.displayName;
                    }
                    else {
                        newValue += ": " + $scope.currentItem;
                    }
                }
            }
            j$('[id*=\'{!hiddenInputId}\']').val(newValue);
        }
        
        $scope.resetPicklists = function() {
            $scope.picklistGroups = [];
            if (typeof $scope.currentGroup != 'undefined')
                $scope.currentGroup.val = [];
            $scope.currentGroup = [];
            groups = [];
        }
    });
    
    function refresh_{!ctrlName}() {
        var scope = angular.element(j$('[for*=panel_{!ctrlName}]')).scope();
        //call groupChanged so any previously chosen value gets cleared when the module changes
        j$('[id*=\'{!hiddenInputId}\']').val('');
        
        scope.$apply(function() { 
            scope.init_{!ctrlName}(); 
        });
    }
    </script>
    
    <apex:outputPanel rendered="{!attributeLabel == null}" html-for="panel_{!ctrlName}" html-class="{!ctrlName}" html-ng-controller="{!ctrlName}" html-ng-init="init_{!ctrlName}();">
        <select id="refType" data-ng-model="currentGroup" data-ng-options="group.name for group in picklistGroups" ng-change="groupChanged()" ng-show="picklistGroups.length > 0" >
            <option value="" ></option>
        </select>
        <select id="{!appName}" ng-model="currentItem" ng-options="val.displayName for val in currentGroup.val" ng-change="updateValue();" ng-show="currentGroup.val.length > 0">
            <option value="" ></option>
            <!--<option ng-repeat="val in currentGroup.val" value="{{val.displayName}}">{{val.displayName}}</option>-->
        </select>
    </apex:outputPanel>
    
    <apex:pageBlockSection columns="1" rendered="{!attributeLabel != null}" html-for="panel_{!ctrlName}" title="{!headerLabel}" showHeader="{!showHeader}" id="componentPBS" html-class="{!ctrlName}" html-ng-controller="{!ctrlName}" html-ng-init="init_{!ctrlName}();" collapsible="false">
        <apex:pageBlockSectionItem html-ng-show="picklistGroups.length > 0" >
            <apex:outputLabel value="{!attributeLabel}"/>
            <select id="refType" data-ng-model="currentGroup" data-ng-options="group.name for group in picklistGroups" ng-change="groupChanged()" ng-show="picklistGroups.length > 0" >
                <option value="" ></option>
            </select>
            <select id="{!appName}" ng-model="currentItem" ng-change="updateValue();" ng-show="currentGroup.val.length > 0">
                <option ng-repeat="val in currentGroup.val" value="{{val.displayName}}">{{val.displayName}}</option>
            </select>
        </apex:pageBlockSectionItem>
    </apex:pageBlockSection>
    
    <script>
        angular.bootstrap(document.getElementsByClassName('{!ctrlName}'), ['{!appName}']);
    </script>
</apex:component>