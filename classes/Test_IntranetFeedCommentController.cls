/**
 * This class contains unit tests for validating the behavior of Apex classes
 * and triggers.
 *
 * Unit tests are class methods that verify whether a particular piece
 * of code is working properly. Unit test methods take no arguments,
 * commit no data to the database, and are flagged with the testMethod
 * keyword in the method definition.
 *
 * All test methods in an organization are executed whenever Apex code is deployed
 * to a production organization to confirm correctness, ensure code
 * coverage, and prevent regressions. All Apex classes are
 * required to have at least 75% code coverage in order to be deployed
 * to a production organization. In addition, all triggers must have some code coverage.
 * 
 * The @isTest class annotation indicates this class only contains test
 * methods. Classes defined with the @isTest annotation do not count against
 * the organization size limit for all Apex scripts.
 *
 * See the Apex Language Reference for more information about Testing and Code Coverage.
 */
/** Description     :	Test class for Intranet Content Class.
  * 
  * Created Date    :	09/15/2014
  *
  * Created By      :   
  *  
  * Current vision  :	v1.0
  *  
  * Revision Logs   :	v1.0 - Created
  * 				:	V2.0 - Modifled By - Rajeev Jain(09/11/2015) - CR-20141002-7579 -  Increase code coverage
  * Coverage        :	95%
  **/  
@isTest(SeeAllData = true)
private class Test_IntranetFeedCommentController {
    
    //Test insert feed comment method
    static testMethod void testInsertFeedComment() {
        
        //Create Intranet Item
        Intranet_Item__c intranetItem = new Intranet_Item__c(Name = 'Test-0' , Active_Status__c = 'Active' , Item_Type__c = 'App Link' , Item_Title__c = 'A1');
        insert intranetItem;
        
        //Create Test data
        FeedItem feedItem = new FeedItem(ParentId = intranetItem.Id, Body = 'Test');
        insert feedItem;
        
        //Start Testing from here
        Test.startTest();
        
        //Initialze controller
        IntranetFeedCommentController controller = new IntranetFeedCommentController();
        
        //Generate Exception 
        try{
            //Call insert method to insert the feed comment
          controller.insertComment();
        }catch(Exception e){}
        
        controller.feedComment.FeedItemId = feedItem.Id;
        controller.feedComment.CommentBody = 'Test Body';
        
        //Call insert method to insert the feed comment
        controller.insertComment();
        
        //Stop test here
        Test.stopTest();
        
        //Fetch comment from database
        System.assert(controller.feedComment.Id != null);
    }
    
    //Test likeFeed method
    static testMethod void testLikeFeed() {
        
        //Intranet Container
        Intranet_Container__c intranetContainer = new Intranet_Container__c(Name = 'Test-2', CurrencyIsoCode = 'USD', Content_Types_Allowed__c = 'App Link');
        insert intranetContainer;
        
        //Intranet Item
        Intranet_Item__c intranetItem = new Intranet_Item__c(Name = 'Test-0' , Active_Status__c = 'Active' , 
                                                                Item_Type__c = 'App Link' , Item_Title__c = 'A1');
        insert intranetItem;
        
        //Intranet Schedule
        Intranet_Schedule__c intranetSchedule = new Intranet_Schedule__c(Name = 'Test4' , Intranet_Container__c = intranetContainer.Id, Intranet_Item__c = intranetItem.Id,
                                                                                Start_Date_Time__c = DateTime.Now()+1, End_Date_Time__c = DateTime.Now()+5 );
        insert intranetSchedule;
        
        //Update User record with Job Level
        System.runAs(new User(Id = UserInfo.getUserId())) {
            
            update new User(Id = UserInfo.getUserId(), Job_Level__c = '10 B1 Early Professional');
        }
        
        //Start Testing from here
        Test.startTest();
        
        //Create New Instance of Intranet Container
        IntranetContainer icContainer = new IntranetContainer(intranetContainer);
        
        //Set values
        IntranetHomeUtility.UserBrowser = 'Chrome';
        IntranetHomeUtility.UserDevice = 'Mobile';
        IntranetHomeUtility.ScreenSize = 992;
        IntranetHomeUtility.NetworkAccess = 'Test';
        
        //Call PopulateUserSession method
        IntranetType.UserSession UserSession = IntranetHomeUtility.getUserSession;
        
        
        //Initialize controller
        IntranetFeedCommentController controller = new IntranetFeedCommentController();
        
        //Create Intranet Content Record
        IntranetContent ic;
        
        ic = new IntranetContent(icContainer,intranetItem,UserSession,IntranetUtilizationHelper.getLikedItems());
        
        //Pass Intranet Content Item for Null
        controller.setIntranetItem(ic);
        
        //Created One Default Utilization Record
        IntranetUtilizationHelper.createIntranetUtilizationRecord(JSON.serialize(UserSession),'Like','test',icContainer.ContainerId,intranetItem.Id,intranetSchedule.Id,null);
        
        
        ic = null;
            
        //Pass Intranet Content Item for Null
        controller.setIntranetItem(ic);
        
        ic = new IntranetContent(icContainer,intranetItem,UserSession,IntranetUtilizationHelper.getLikedItems());
        
        //Set Intranet Item In controller
        controller.setIntranetItem(ic);
        
        //Get Intranet Item
        //intranetItem  = controller.getIntranetItem();
        
        controller.UserSession = UserSession;
        controller.intranetContainerId = icContainer.ContainerId;
        controller.intranetItemId = ic.IntranetItemId;
        controller.intranetScheduleId = intranetSchedule.Id;
        controller.ratingValue = null;
        controller.intChatterLikeCount = 0;
        
        //Call create utilization method
        controller.likeFeed();
        
        //Stop testing here
        Test.stopTest();
        
        //Check for the newly created Utilization record
        List<Intranet_Utilization__c> intranetUtilization = [Select Id, Access_Location__c, Browser__c, Click_Type__c, Department__c, Device__c, Division__c, 
                                                                Function__c, Intranet_Container__c, Intranet_Item__c, Intranet_Schedule__c, 
                                                                Job_Level__c, Manager__c, Office__c, Rating__c, Screensize__c, User__c 
                                                                from Intranet_Utilization__c where Intranet_Container__c =: intranetContainer.Id];
        
        //Cover Extra Properties
        IntranetContent intraContent = controller.getIntranetItem();
        Integer commentCounter = controller.intChatterCommentCount;
        Id parentId = controller.parentId;
        Id feedId = controller.feedItemId;
        String chatterBody = controller.chatterBody;
        String loadType = controller.loadType;
        
        //Call create utilization method
        controller.likeFeed();
        
        //Assert for the results
        System.assertEquals(UserSession.AccessLocation, intranetUtilization[0].Access_Location__c);
        System.assertEquals(UserSession.Browser, intranetUtilization[0].Browser__c);
        System.assertEquals(IntranetUtilizationHelper.CLICK_TYPE_LIKE, intranetUtilization[0].Click_Type__c);
        System.assertEquals(UserSession.Department, intranetUtilization[0].Department__c);
        System.assertEquals(UserSession.Device, intranetUtilization[0].Device__c);
        System.assertEquals(UserSession.Division, intranetUtilization[0].Division__c);
        System.assertEquals(UserSession.Function, intranetUtilization[0].Function__c);
        System.assertEquals(intranetContainer.Id, intranetUtilization[0].Intranet_Container__c);
        System.assertEquals(ic.IntranetItemId, intranetUtilization[0].Intranet_Item__c);
        System.assertEquals(intranetSchedule.Id, intranetUtilization[0].Intranet_Schedule__c);
        System.assertEquals(UserSession.JobLevel, intranetUtilization[0].Job_Level__c);
        System.assertEquals(false, intranetUtilization[0].Manager__c);
        System.assertEquals(null, intranetUtilization[0].Rating__c);
        System.assertEquals(UserSession.ScreenSize, intranetUtilization[0].Screensize__c);
        System.assertEquals(UserSession.UserId, intranetUtilization[0].User__c);
        
        //Query through intranet item records
        if(String.isNotBlank(UserSession.AssignedOffice) ){
        	List<Intranet_Item__c> officeItem = [select Id, Office_Short_Name__c from Intranet_Item__c where Id = :UserSession.AssignedOffice];
        	
            //Assert on result
            System.assertEquals(officeItem != null && officeItem.size() >0 ? officeItem[0].Office_Short_Name__c + ' Office' : UserSession.AssignedOffice, intranetUtilization[0].Office__c);
        }
    }
}