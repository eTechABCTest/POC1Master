/*
	Purpose: 		require comments for approval rejections.

	Created By:		Victor Hanson

	Created Date:	8/29/13
	
	Revision Log:	V_1.0: Created
						V_1.1 Modified - Jeffery Sun - 09/30/2015 - CR-20130328-2770 (Update commented code, just in case)
*/
public without sharing class PaymentRequestTriggerHelper {

	// When a payment request is added, total all budget allocation amounts associated with the purchase request
	public static void calculateTotalBudgetPaymentAmount(list<Payment_Request__c> triggerNew, boolean updatePaymentRequests) {

		// list of payment requests that may be updated
		list<Payment_Request__c> pymtRequestsToUpdate = new list<Payment_Request__c>();

		// get the ids of all purchase requests
		set<Id> purchaseReqIdSet = new set<Id>();
		for (Payment_Request__c pmtReq : triggerNew) purchaseReqIdSet.add(pmtReq.Purchase_Request__c);

		// get all of the related budget allocations
		list<Budget_Allocation__c> budgetAllocations = [SELECT Id, Allocation_Quarter__c, Allocation_Amount__c,
														Purchase_Request__c, Allocation_Date__c
														FROM Budget_Allocation__c
														WHERE Purchase_Request__c IN :purchaseReqIdSet
														AND Purchase_Request__c != null];

		// create a map<Purchase Req Id, map<Qx, Total Amt>>
		map<Id, map<string, decimal>> PurchReqToQxAllocationMap = BudgetAllocationTriggerHelper.getPurchReqToQxAllocationMap(budgetAllocations);

		for (Payment_Request__c pmtReq : triggerNew) {

			// default the totalAmt to zero in case the map doesnt contain any data for that quarter
			decimal totalAmt = 0;

			// create yyyyQx string based on the date
			string yrQxString = BudgetAllocationTriggerHelper.getYearQtrString(pmtReq.Invoice_Due_Date__c);

			// get the yyyyQxToTotalAmt map based on the purchase request id
			map<string, decimal> qxToTotalAmt = PurchReqToQxAllocationMap.get(pmtReq.Purchase_Request__c);

			if (qxToTotalAmt != null) {
				system.debug('@@qxToTotalAmt11:' + qxToTotalAmt);
				// set the total amt if the quarter exists
				if (qxToTotalAmt.containsKey(yrQxString)) totalAmt = qxToTotalAmt.get(yrQxString);
			}

			// see if the payment request needs to be updated
			if (pmtReq.Total_Qx_Budget_Allocation_Amt__c != totalAmt) {

				// update the total quarterly budget allocation amount
				pmtReq.Total_Qx_Budget_Allocation_Amt__c = totalAmt;
				pymtRequestsToUpdate.add(pmtReq);
			}
		}


		if (pymtRequestsToUpdate.size() > 0 && updatePaymentRequests) {

			// update the payment requests
			update pymtRequestsToUpdate;
		}
	}

	// begin the approval process for any Payment Requests that are created by a user with ABC Dataloader profile
	/*public static void BeginApprovalProcess(List<Payment_Request__c> triggerNew) {
    	// return immediately if the profileId is not ABC Dataloader
    	// all Payment Requests that require approval are generated by the ABC Dataloader profile
    	if (UserInfo.getProfileId() != Label.ABC_Dataloader_Profile_Id || trigger.new.size() > 1) return;

    	// check each payment request to see whether it needs approval
		for (Payment_Request__c paymentRequest : triggerNew) {
    		// Create an approval request for the payment request
	        Approval.ProcessSubmitRequest req1 = new Approval.ProcessSubmitRequest();
	        req1.setComments('Submitting request for approval.');
	        req1.setObjectId(paymentRequest.id);

	        // Submit the approval request for the payment request
	        Approval.ProcessResult result = Approval.process(req1);
		}
	}*/

	// require comments when an approval is rejected
	public static void RequireCommentsForAppRejection(List<Payment_Request__c> triggerNew) {
    	// map to hold payment requests with approval requests in process
    	Map<Id, Payment_Request__c> pymtReqMap = new Map<Id, Payment_Request__c>();
    	for (Payment_Request__c pymtRequest : triggerNew) {
			if (pymtRequest.Approval_Comment_Check__c == 'Requested') {
				pymtReqMap.put(pymtRequest.Id, pymtRequest);
		      	// Reset the field value to null,
				// so that the check is not repeated,
				// next time the object is updated
				pymtRequest.Approval_Comment_Check__c = null;
    		}
    	}

    	if (!pymtReqMap.isEmpty()) {
    		// Get the last approval process step for the approval processes,
			// and check the comments.
			for (ProcessInstance pi : [SELECT TargetObjectId,
			                            (SELECT Id, StepStatus, Comments FROM Steps WHERE StepStatus = 'Rejected' ORDER BY CreatedDate DESC LIMIT 1 )
			                           FROM ProcessInstance
			                           WHERE TargetObjectId In :pymtReqMap.keySet()
			                           AND Id IN (SELECT ProcessInstanceId FROM ProcessInstanceStep WHERE StepStatus = 'Rejected')
			                           ORDER BY CreatedDate DESC LIMIT 1])
			{
				system.debug('@@Status:' + pi.Steps[0].StepStatus + '  Comments:' + pi.Steps[0].Comments);
				// If no comment exists, then prevent the object from saving.
				if ((pi.Steps[0].Comments == null ||
					pi.Steps[0].Comments.trim().length() == 0))
				{
					pymtReqMap.get(pi.TargetObjectId).addError('Please provide a reason for your rejection.');
				}
			}
		}
    }

    public static void PopuplateABCLiaison(List<Payment_Request__c> triggerNew) {
    	// get all institutions
    	Set<Id> acctIds = new Set<Id>();
    	for (Payment_Request__c pymtRequest : triggerNew) {
    		if (pymtRequest.Vendor__c != null) acctIds.add(pymtRequest.Vendor__c);
    	}
    	Map<Id, Account> acctMap = new Map<Id, Account>([SELECT Id, Advisory_Board_Liaison__c, Advisory_Board_Liaison__r.Employee_Id__c
    													 FROM Account
    													 WHERE Id IN :acctIds]);
    	Set<String> employeeIdSet = new Set<String>();
    	// match account to employee id
    	Map<Id, String> AcctToEmployeeId = new Map<Id, String>();
    	for (Account a : acctMap.values()) {
    		if (a.Advisory_Board_Liaison__c != null && a.Advisory_Board_Liaison__r.Employee_Id__c != null) {
    			employeeIdSet.add(a.Advisory_Board_Liaison__r.Employee_Id__c);
    			acctMap.put(a.Id, a);
    		}
    	}

    	// create a map of all users with these employee ids
    	List<User> users = [SELECT Id, Employee_Id__c FROM User WHERE Employee_Id__c != null AND Employee_Id__c IN :employeeIdSet];
    	Map<String, Id> empIdToUserId = new Map<String, Id>();
    	for (User u : users) {
    		empIdToUserId.put(u.Employee_Id__c, u.Id);
    	}

    	// set the liaison to match the liaison of the institution
    	for (Payment_Request__c pymtRequest : triggerNew) {
    		if (pymtRequest.Vendor__c != null && acctMap.containsKey(pymtRequest.Vendor__c)) {
	    		// get the vendor institution
	    		Account vendor = acctMap.get(pymtRequest.Vendor__c);
	    		if (vendor.Advisory_Board_Liaison__c != null && vendor.Advisory_Board_Liaison__r.Employee_Id__c != null) {
	    			pymtRequest.Advisory_Board_Liaison__c = empIdToUserId.get(vendor.Advisory_Board_Liaison__r.Employee_Id__c);
	    		}
    		}
    	}
    }
}